{"version":3,"file":"tree-walker.js","sources":["../source/default-adapter.js","../node_modules/@actualwave/has-own/has-own.js","../source/prefixes.js","../source/utils.js","../source/augmentations/index.js","../source/wrapper.js","../source/augmentations/core.js","../source/augmentations/node.js","../source/augmentations/list.js","../source/index.js"],"sourcesContent":["let defaultAdapter;\n\nexport const setDefaultAdapter = (adapter) => {\n  defaultAdapter = adapter;\n};\nexport const getDefaultAdapter = () => defaultAdapter;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst hasOwn = (\n  (has) =>\n  (target, property) =>\n  Boolean(target && has.call(target, property))\n)(Object.prototype.hasOwnProperty);\n\nexports.hasOwn = hasOwn;\nexports.default = hasOwn;","import hasOwn from '@actualwave/has-own';\n\nexport const GET_KEY = 'get';\nexport const HAS_KEY = 'has';\nexport const SET_KEY = 'set';\nexport const DELETE_KEY = 'deleteProperty';\n\nconst namePrefixes = {};\n\nexport const isValidPrefix = (prefix) => typeof prefix === 'string' && hasOwn(namePrefixes, prefix);\n\nexport const getPrefix = (key) => key.charAt();\n\nexport const isPrefixedKey = (key) => {\n  if (key && typeof key === 'string' && key.length > 1) {\n    return hasOwn(namePrefixes, getPrefix(key));\n  }\n\n  return false;\n};\n\nconst getPrefixHandlers = (key) => namePrefixes[getPrefix(key)];\n\nconst createPrefixHandlerGetter = (type) => (key) => {\n  const handlers = getPrefixHandlers(key);\n\n  return handlers && handlers[type];\n};\n\nexport const getPrefixGetHandler = createPrefixHandlerGetter(GET_KEY);\n\nexport const getPrefixHasHandler = createPrefixHandlerGetter(HAS_KEY);\n\nexport const getPrefixSetHandler = createPrefixHandlerGetter(SET_KEY);\n\nexport const getPrefixDeleteHandler = createPrefixHandlerGetter(DELETE_KEY);\n\nexport const setNamePrefix = (prefix, handler) => {\n  if (typeof prefix !== 'string' || prefix.length !== 1) {\n    throw new Error('Name Prefix must be one character string.');\n  }\n\n  if (typeof handler === 'function') {\n    namePrefixes[prefix] = {\n      get: handler,\n      has: (...args) => handler(...args) !== undefined,\n    };\n  } else {\n    const { get, set, has, deleteProperty } = handler;\n\n    namePrefixes[prefix] = { get, set, has, deleteProperty };\n  }\n};\n","export const isIntKey = (key) => (typeof key === 'number' && key >>> 0 === key)\n  // it is integer number string\n  || `${parseInt(String(key), 10)}` === key;\n\nexport const getValue = (node, adapter, childName = undefined) => {\n  if (childName !== undefined) {\n    return adapter.getChildrenByName(node, childName);\n  }\n\n  return node;\n};\n\nexport const getSingleNode = (node, adapter, childName = undefined) => (\n  adapter.toNode(getValue(node, adapter, childName))\n);\n\nexport const getNodeList = (node, adapter, childName = undefined) => (\n  adapter.toList(getValue(node, adapter, childName))\n);\n","import hasOwn from '@actualwave/has-own';\n\nlet augmentations = {};\n\nexport const resetAugmentations = (augs = {}) => {\n  augmentations = augs;\n};\n\nexport const addAugmentations = (augs) => {\n  augmentations = {\n    ...augmentations,\n    ...augs,\n  };\n};\n\nexport const hasAugmentation = (key) => key && typeof key === 'string' && hasOwn(augmentations, key);\n\nexport const getAugmentation = (key) => augmentations[key];\n\nexport const applyAugmentation = (key, ...args) => augmentations[key](...args);\n","import { isIntKey, getValue, getSingleNode, getNodeList } from './utils';\n\nimport {\n  GET_KEY,\n  HAS_KEY,\n  SET_KEY,\n  DELETE_KEY,\n  getPrefix,\n  isPrefixedKey,\n  getPrefixGetHandler,\n  getPrefixHasHandler,\n  getPrefixSetHandler,\n  getPrefixDeleteHandler,\n} from './prefixes';\n\nimport { hasAugmentation, applyAugmentation } from './augmentations';\n\nlet handlers;\nlet utils;\n\nconst GET_RESTRICTED_NAMES = {\n  constructor: true,\n  prototype: true,\n  /*\n  call: true,\n  apply: true,\n  */\n};\n\nconst createWalkerNode = (node, adapter, childName = undefined) => {\n  function TreeWalker() {\n    throw new Error('Should have been never called');\n  }\n\n  // can be single Node and NodeList with length >= 0\n  // should it be always NodeList?\n  TreeWalker.node = node;\n  // childName always String/Symbol, Number's are being handled in proxy get wrapper\n  // INFO \"name\" is RO property of Function object\n  TreeWalker.childName = childName;\n  TreeWalker.adapter = adapter;\n  return TreeWalker;\n};\n\nconst wrap = (node, adapter, childName = undefined) => {\n  if (!adapter.isNode(node) && !adapter.isList(node)) {\n    return node;\n  }\n\n  return new Proxy(createWalkerNode(node, adapter, childName), handlers);\n};\n\n// eslint-disable-next-line\nutils = {\n  isIntKey,\n  getValue,\n  getSingleNode,\n  getNodeList,\n  wrap,\n};\n\nconst throwHandlerNotAvailable = (operation, key, handler) => {\n  if (!handler) {\n    throw new Error(`Operation \"${operation}\" is not supported for prefix \"${getPrefix(key)}\".`);\n  }\n};\n\nconst get = ({ node, adapter, childName }, key) => {\n  /*\n   if symbol, return node property\n   if string childName used\n   if starts with prefix, call GET handler\n   else return wrapper with current single node and property childName\n   if numeric index used, use node as parent and childName is undefined\n   */\n  if (typeof key === 'symbol' || GET_RESTRICTED_NAMES[key] === true) {\n    return getSingleNode(node, adapter, childName)[key];\n  }\n\n  if (isIntKey(key)) {\n    return wrap(adapter.getNodeAt(getNodeList(node, adapter, childName), key), adapter);\n  }\n\n  if (isPrefixedKey(key)) {\n    const handler = getPrefixGetHandler(key);\n\n    throwHandlerNotAvailable(GET_KEY, key, handler);\n\n    return handler(getValue(node, adapter, childName), adapter, [key.substr(1)], utils);\n  }\n\n  const result = getValue(node, adapter, childName);\n\n  // return wrap with node and childName\n  return wrap(result, adapter, key);\n};\n\nconst has = ({ node, adapter, childName }, key) => {\n  if (typeof key === 'symbol' || GET_RESTRICTED_NAMES[key] === true) {\n    return key in getSingleNode(node, adapter, childName);\n  }\n\n  if (isIntKey(key)) {\n    return !!adapter.getNodeAt(getNodeList(node, adapter, childName), key);\n  }\n\n  if (isPrefixedKey(key)) {\n    const handler = getPrefixHasHandler(key);\n\n    throwHandlerNotAvailable(HAS_KEY, key, handler);\n\n    return handler(getValue(node, adapter, childName), adapter, [key.substr(1)], utils);\n  }\n\n  return adapter.hasChild(getSingleNode(node, adapter, childName), key);\n};\n\nconst apply = ({ node, adapter, childName }, thisArg, argumentsList) => {\n  if (childName === undefined) {\n    throw new Error('Cannot call on TreeWalker Node');\n  }\n\n  /* GET always return result of prefixed property, means there are\n     no cases when we get a wrapped node to APPLY trap with prefixed name.\n\n  if (isValidPrefix(childName)) {\n    const handler = getPrefixApplyHandler(childName);\n\n    throwHandlerNotAvailable(APPLY_KEY, childName, handler);\n\n    return handler(\n      node,\n      adapter,\n      [childName.substr(1), ...argumentsList],\n      utils,\n    );\n  }\n  */\n\n  if (hasAugmentation(childName)) {\n    // INFO cannot use target because it contains method's childName, not Node childName\n    // call the function with saving context, so other augmentations are accessible via \"this\"\n    return applyAugmentation(childName, node, adapter, argumentsList, utils);\n  }\n\n  // in case of normal function being called out of the tree node\n  const targetNode = adapter.toNode(node);\n  if (typeof targetNode[childName] === 'function') {\n    return targetNode[childName](...argumentsList);\n  }\n\n  // FIXME might throw only in dev mode(needs implementation)\n  throw new Error(`\"${childName}\" is not a callable object.`);\n};\n\nconst set = ({ node, adapter, childName }, key, value) => {\n  /*\n   if symbol, set value directly\n   if starts with prefix, call SET handler\n   else throw an error\n   */\n  if (typeof key === 'symbol' || GET_RESTRICTED_NAMES[key] === true) {\n    getSingleNode(node, adapter, childName)[key] = value;\n    return true;\n  }\n\n  if (isPrefixedKey(key)) {\n    const handler = getPrefixSetHandler(key);\n\n    throwHandlerNotAvailable(SET_KEY, key, handler);\n\n    return handler(getValue(node, adapter, childName), adapter, [key.substr(1), value], utils);\n  }\n\n  throw new Error(`Operation \"${SET_KEY}\" is not supported for nodes.`);\n};\n\nconst deleteProperty = ({ node, adapter, childName }, key) => {\n  /*\n   if symbol, delete value directly\n   if starts with prefix, call DELETE handler\n   else throw an error\n   */\n  if (typeof key === 'symbol' || GET_RESTRICTED_NAMES[key] === true) {\n    return delete getSingleNode(node, adapter, childName)[key];\n  }\n\n  if (isPrefixedKey(key)) {\n    const handler = getPrefixDeleteHandler(key);\n\n    throwHandlerNotAvailable(DELETE_KEY, key, handler);\n\n    return handler(getValue(node, adapter, childName), adapter, [key.substr(1)], utils);\n  }\n\n  throw new Error(`Operation \"${DELETE_KEY}\" is not supported for nodes.`);\n};\n\nhandlers = {\n  get,\n  has,\n  apply,\n  // only for prefixed keys\n  set,\n  deleteProperty,\n};\n\nexport default wrap;\n","const toString = (node, adapter) => (adapter.string ? adapter.string(node) : node.toString());\nconst valueOf = (node, adapter) => (adapter.value ? adapter.value(node) : node);\n\nexport default {\n  toString,\n  valueOf,\n};\n","/* eslint-disable prefer-spread */\nconst name = (node, adapter) => adapter.getName(node);\n\nconst children = (node, adapter, [childName], utils) => {\n  let list;\n\n  if (childName) {\n    list = adapter.getChildrenByName(node, childName);\n  } else {\n    list = adapter.getChildren(node);\n  }\n\n  return utils.wrap(list, adapter);\n};\n\n/**\n * @internal\n */\nconst descendantsAll = (node, adapter, args, utils) => {\n  const children = []; // eslint-disable-line no-shadow\n  const descendants = [];\n  const list = adapter.getChildren(node);\n  const length = adapter.getLength(list, adapter);\n\n  for (let index = 0; index < length; index += 1) {\n    const child = list[index];\n    children.push(child);\n    descendants.push.apply(descendants, descendantsAll(child, adapter, args, utils));\n  }\n\n  /* children go first, then other descendants */\n  return [...children, ...descendants];\n};\n\n/**\n * @internal\n */\nconst descendantsByName = (node, adapter, args, utils) => {\n  const [childName] = args;\n  const children = []; // eslint-disable-line no-shadow\n  const descendants = [];\n  const list = adapter.getChildren(node);\n  const length = adapter.getLength(list, adapter);\n\n  for (let index = 0; index < length; index += 1) {\n    const child = adapter.getNodeAt(list, index);\n\n    if (adapter.getName(child) === childName) {\n      children.push(child);\n    }\n\n    descendants.push.apply(descendants, descendantsByName(child, adapter, args, utils));\n  }\n\n  /* children go first, then other descendants */\n  return [...children, ...descendants];\n};\n\nconst descendants = (node, adapter, args, utils) => {\n  const [childName] = args;\n\n  if (childName) {\n    return utils.wrap(descendantsByName(node, adapter, args, utils), adapter);\n  }\n\n  return utils.wrap(descendantsAll(node, adapter, args, utils), adapter);\n};\n\nconst childAt = (node, adapter, [index = 0], utils) => utils.wrap(adapter.getChildAt(node, index), adapter);\n\nconst root = (node, adapter, args, utils) => utils.wrap(adapter.getNodeRoot(node), adapter);\n\nconst parent = (node, adapter, args, utils) => utils.wrap(adapter.getNodeParent(node), adapter);\n\nexport default {\n  name,\n  children,\n  descendants,\n  childAt,\n  root,\n  parent,\n};\n","const length = (node, adapter) => {\n  if (adapter.isList(node)) {\n    return adapter.getLength(node);\n  }\n\n  if (adapter.isNode(node)) {\n    return 1;\n  }\n\n  return 0;\n};\n\nconst at = (node, adapter, args, utils) => {\n  const [index = 0] = args;\n  let result;\n\n  if (adapter.isList(node)) {\n    const child = adapter.getNodeAt(node, index);\n\n    if (child) {\n      result = child;\n    }\n  } else if (!index) {\n    result = node;\n  }\n\n  // if nothing found return empty array, which will create empty wrapper for\n  // chained calls, this will make next calls errorless.\n  return utils.wrap(result || [], adapter);\n};\n\nconst first = (node, adapter, args, utils) => at(node, adapter, [0], utils);\n\nconst filter = (node, adapter, [callback], utils) => {\n  // apply filter on element collection\n  // always return wrapped list\n  const list = adapter.toList(node);\n  const listLength = adapter.getLength(node);\n  const result = [];\n\n  const wrappedNode = utils.wrap(list, adapter);\n  for (let index = 0; index < listLength; index += 1) {\n    const child = adapter.getNodeAt(list, index);\n    if (callback(utils.wrap(child, adapter), index, wrappedNode)) {\n      result.push(child);\n    }\n  }\n\n  return utils.wrap(result, adapter);\n};\n\nconst map = (node, adapter, [callback], utils) => {\n  // apply map on element collection\n  const list = adapter.toList(node);\n  const listLength = adapter.getLength(list);\n  const result = [];\n\n  const wrappedList = utils.wrap(list, adapter);\n  for (let index = 0; index < listLength; index += 1) {\n    const child = adapter.getNodeAt(list, index);\n    const childResult = callback(utils.wrap(child, adapter), index, wrappedList);\n    result.push(childResult);\n  }\n\n  // returns normal array because we don't know if all items in result are nodes\n  // and if they are, they will be likely already wrapped\n  return result;\n};\n\nconst reduce = (node, adapter, [callback, result], utils) => {\n  // apply reduce on element collection\n  const list = adapter.toList(node);\n  const listLength = adapter.getLength(node);\n  let lastResult = result;\n\n  const wrappedNode = utils.wrap(list, adapter);\n  for (let index = 0; index < listLength; index += 1) {\n    const child = adapter.getNodeAt(list, index);\n    lastResult = callback(lastResult, utils.wrap(child, adapter), index, wrappedNode);\n  }\n\n  return lastResult;\n};\n\nexport default {\n  length,\n  at,\n  first,\n  filter,\n  map,\n  reduce,\n};\n","import { setDefaultAdapter, getDefaultAdapter } from './default-adapter';\nimport { setNamePrefix, isValidPrefix } from './prefixes';\nimport wrap from './wrapper';\nimport { addAugmentations, resetAugmentations, hasAugmentation } from './augmentations';\nimport coreAugmentations from './augmentations/core';\nimport nodeAugmentations from './augmentations/node';\nimport listAugmentations from './augmentations/list';\n\naddAugmentations(coreAugmentations);\n\nconst create = (root, adapter = getDefaultAdapter()) => wrap(adapter.validateRoot(root), adapter);\n\nexport {\n  setDefaultAdapter,\n  getDefaultAdapter,\n  addAugmentations,\n  hasAugmentation,\n  resetAugmentations,\n  coreAugmentations,\n  nodeAugmentations,\n  listAugmentations,\n  setNamePrefix,\n  isValidPrefix,\n  create,\n};\n\nexport default create;\n"],"names":["defaultAdapter","setDefaultAdapter","adapter","getDefaultAdapter","GET_KEY","HAS_KEY","SET_KEY","DELETE_KEY","namePrefixes","isValidPrefix","prefix","hasOwn","getPrefix","key","charAt","isPrefixedKey","length","getPrefixHandlers","createPrefixHandlerGetter","type","handlers","getPrefixGetHandler","getPrefixHasHandler","getPrefixSetHandler","getPrefixDeleteHandler","setNamePrefix","handler","Error","args","undefined","get","set","has","deleteProperty","isIntKey","parseInt","String","getValue","node","childName","getChildrenByName","getSingleNode","toNode","getNodeList","toList","augmentations","resetAugmentations","augs","addAugmentations","hasAugmentation","applyAugmentation","utils","GET_RESTRICTED_NAMES","createWalkerNode","TreeWalker","wrap","isNode","isList","Proxy","throwHandlerNotAvailable","operation","getNodeAt","substr","result","hasChild","apply","thisArg","argumentsList","targetNode","value","toString","string","valueOf","name","getName","children","list","getChildren","descendantsAll","descendants","getLength","index","child","push","descendantsByName","childAt","getChildAt","root","getNodeRoot","parent","getNodeParent","at","first","filter","callback","listLength","wrappedNode","map","wrappedList","childResult","reduce","lastResult","coreAugmentations","create","validateRoot"],"mappings":"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"}