{"version":3,"file":"tree-walker.js","sources":["../source/default-adapter.js","../source/prefixes.js","../source/utils.js","../source/augmentations/index.js","../source/wrapper.js","../source/augmentations/core.js","../source/index.js"],"sourcesContent":["let defaultAdapter = null;\r\n\r\nexport const setDefaultAdapter = (adapter) => {\r\n  defaultAdapter = adapter;\r\n};\r\nexport const getDefaultAdapter = () => defaultAdapter;\r\n","const namePrefixes = {};\r\n\r\nexport const isValidPrefix = (prefix) => (\r\n  typeof prefix === 'string'\r\n  && prefix.length === 1\r\n  && namePrefixes.hasOwnProperty(prefix)\r\n);\r\n\r\nexport const isPrefixedKey = (key) => (\r\n  key\r\n  && typeof(key) === 'string'\r\n  && key.length > 1\r\n  && namePrefixes.hasOwnProperty(key.charAt())\r\n);\r\n\r\nexport const getPrefixHandler = (key) => namePrefixes[key.charAt()];\r\n\r\nexport const setNamePrefix = (prefix, handler) => {\r\n  if (typeof prefix !== 'string' || prefix.length !== 1) {\r\n    throw new Error('Name Prefix must be one character string.');\r\n  }\r\n\r\n  namePrefixes[prefix] = handler;\r\n};\r\n","export const isIntKey = (key) => (`${parseInt(key, 10)}` === key);\r\n\r\nexport const getValue = (node, adapter, childName = undefined) => {\r\n  if (childName !== undefined) {\r\n    return adapter.getChildrenByName(node, childName);\r\n  }\r\n\r\n  return node;\r\n};\r\n\r\nexport const getSingleNode = (node, adapter, childName = undefined) => {\r\n  const value = getValue(node, adapter, childName);\r\n\r\n  if (adapter.isList(value)) {\r\n    return adapter.getNodeAt(node);\r\n  }\r\n\r\n  return value;\r\n};\r\n\r\nexport const getNodeList = (node, adapter, childName = undefined) => {\r\n  return adapter.toList(getValue(node, adapter, childName));\r\n};\r\n","let augmentations = {};\r\n\r\nexport const resetAugmentations = (augs = {}) => {\r\n  augmentations = augs;\r\n};\r\n\r\nexport const addAugmentations = (augs = {}) => {\r\n  augmentations = {\r\n    ...augmentations,\r\n    ...augs,\r\n  };\r\n};\r\n\r\nexport const hasAugmentation = (key) => (\r\n  key\r\n  && typeof key === 'string'\r\n  && augmentations.hasOwnProperty(key)\r\n);\r\n\r\nexport const getAugmentation = (key) => augmentations[key];\r\n\r\nexport const applyAugmentation = (key, ...args) => augmentations[key](...args);\r\n","import {\r\n  isIntKey,\r\n  getValue,\r\n  getSingleNode,\r\n  getNodeList,\r\n} from './utils';\r\n\r\nimport {\r\n  isPrefixedKey,\r\n  isValidPrefix,\r\n  getPrefixHandler,\r\n} from './prefixes';\r\n\r\nimport {\r\n  hasAugmentation,\r\n  applyAugmentation,\r\n} from './augmentations';\r\n\r\nlet handlers;\r\nlet utils;\r\n\r\nconst createWalkerNode = (node, adapter, childName = undefined) => {\r\n  function TreeWalker() {\r\n    throw new Error('should have been never called');\r\n  }\r\n\r\n  // can be single Node and NodeList with length >= 0\r\n  // should it be always NodeList?\r\n  TreeWalker.node = node;\r\n  // childName always String/Symbol, Number's are being handled in proxy get wrapper\r\n  // INFO \"name\" is RO property of Function object\r\n  TreeWalker.childName = childName;\r\n  TreeWalker.adapter = adapter;\r\n  return TreeWalker;\r\n};\r\n\r\nconst wrapWithProxy = (node, adapter, childName = undefined) => {\r\n  if (!adapter.isNode(node) && !adapter.isList(node)) {\r\n    return node;\r\n  }\r\n\r\n  return new Proxy(createWalkerNode(node, adapter, childName), handlers);\r\n};\r\n\r\n// eslint-disable-next-line\r\nutils = {\r\n  isIntKey,\r\n  getValue,\r\n  getSingleNode,\r\n  getNodeList,\r\n  wrapWithProxy,\r\n};\r\n\r\nconst get = ({ node, adapter, childName }, key) => {\r\n  /*\r\n   if string childName used\r\n   if starts with $, return attribute value\r\n   else return wrapper with current single node and property childName\r\n   if numeric index used, use node as parent and childName is undefined\r\n   */\r\n  if (isIntKey(key)) {\r\n    return wrapWithProxy(adapter.getNodeAt(getNodeList(node, adapter, childName), key), adapter);\r\n  }\r\n\r\n  if (isPrefixedKey(key)) {\r\n    const handler = getPrefixHandler(key);\r\n    return handler(getValue(node, adapter, childName), adapter, [key.substr(1)], utils);\r\n  }\r\n\r\n  // return wrap with node and childName\r\n  return wrapWithProxy(getValue(node, adapter, childName), adapter, key);\r\n};\r\n\r\nconst has = ({ node, adapter, childName }, key) => {\r\n  if (isIntKey(key)) {\r\n    return !!adapter.getNodeAt(getNodeList(node, adapter, childName), key);\r\n  }\r\n\r\n  if (isPrefixedKey(key)) {\r\n    // return adapter.hasAttribute(getSingleNode(node, adapter, childName), key.substr(1));\r\n    // don't know how to implement this, calling same handler as in GET seems overkill\r\n    return true;\r\n  }\r\n\r\n  return adapter.hasChild(getSingleNode(), key);\r\n};\r\n\r\nconst apply = ({ node, adapter, childName }, thisArg, argumentsList) => {\r\n  if (childName === undefined) {\r\n    throw new Error('Cannot call on TreeWalker Node');\r\n  }\r\n\r\n  // this works only of childName === prefix, one char string\r\n  // otherwise it should be passed into arguments\r\n  if (isValidPrefix(childName)) {\r\n    const handler = getPrefixHandler(childName);\r\n    return handler(node, adapter, argumentsList, utils);\r\n  }\r\n\r\n  if (hasAugmentation(childName)) {\r\n    // INFO cannot use target because it contains method's childName, not Node childName\r\n    // call the function with saving context, so other augmentations are accessible via \"this\"\r\n    return applyAugmentation(childName, node, adapter, argumentsList, utils);\r\n  }\r\n\r\n  // FIXME might throw only in dev mode(needs implmentation)\r\n  throw new Error(`\"${childName}\" is not a callable object.`);\r\n};\r\n\r\nhandlers = {\r\n  get,\r\n  has,\r\n  apply,\r\n};\r\n\r\nexport default wrapWithProxy;\r\n\r\n","const toString = (node) => node.toString();\r\nconst valueOf = (node) => node;\r\n\r\nexport default {\r\n  toString,\r\n  valueOf,\r\n  [Symbol.toPrimitive]: (node) => node,\r\n};\r\n","import { setDefaultAdapter, getDefaultAdapter } from './default-adapter';\nimport { setNamePrefix, isValidPrefix } from './prefixes';\nimport wrapWithProxy from './wrapper';\nimport { addAugmentations, resetAugmentations, hasAugmentation } from './augmentations';\nimport coreAugmentations from './augmentations/core';\n\naddAugmentations(coreAugmentations);\n\nconst create = (root, adapter = getDefaultAdapter()) =>\n  wrapWithProxy(adapter.validateRoot(root), adapter);\n\nexport {\n  setDefaultAdapter,\n  getDefaultAdapter,\n\n  addAugmentations,\n  hasAugmentation,\n  resetAugmentations,\n  coreAugmentations,\n\n  setNamePrefix,\n  isValidPrefix,\n\n  create,\n};\n\nexport default create;\n"],"names":["defaultAdapter","setDefaultAdapter","adapter","getDefaultAdapter","namePrefixes","isValidPrefix","prefix","length","hasOwnProperty","isPrefixedKey","key","charAt","getPrefixHandler","setNamePrefix","handler","Error","isIntKey","parseInt","getValue","node","childName","undefined","getChildrenByName","getSingleNode","value","isList","getNodeAt","getNodeList","toList","augmentations","resetAugmentations","augs","addAugmentations","hasAugmentation","applyAugmentation","args","handlers","utils","createWalkerNode","TreeWalker","wrapWithProxy","isNode","Proxy","get","substr","has","hasChild","apply","thisArg","argumentsList","toString","valueOf","Symbol","toPrimitive","coreAugmentations","create","root","validateRoot"],"mappings":"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"}