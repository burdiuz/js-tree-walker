{"version":3,"file":"tree-walker.min.js","sources":["../source/default-adapter.js","../source/prefixes.js","../source/utils.js","../source/augmentations/index.js","../source/wrapper.js","../source/augmentations/core.js","../source/index.js"],"sourcesContent":["let defaultAdapter = null;\r\n\r\nexport const setDefaultAdapter = (adapter) => {\r\n  defaultAdapter = adapter;\r\n};\r\nexport const getDefaultAdapter = () => defaultAdapter;\r\n","const namePrefixes = {};\r\n\r\nexport const isValidPrefix = (prefix) => (\r\n  typeof prefix === 'string'\r\n  && prefix.length === 1\r\n  && namePrefixes.hasOwnProperty(prefix)\r\n);\r\n\r\nexport const isPrefixedKey = (key) => (\r\n  key\r\n  && typeof(key) === 'string'\r\n  && key.length > 1\r\n  && namePrefixes.hasOwnProperty(key.charAt())\r\n);\r\n\r\nexport const getPrefixHandler = (key) => namePrefixes[key.charAt()];\r\n\r\nexport const setNamePrefix = (prefix, handler) => {\r\n  if (typeof prefix !== 'string' || prefix.length !== 1) {\r\n    throw new Error('Name Prefix must be one character string.');\r\n  }\r\n\r\n  namePrefixes[prefix] = handler;\r\n};\r\n","export const isIntKey = (key) => (`${parseInt(key, 10)}` === key);\r\n\r\nexport const getValue = (node, adapter, childName = undefined) => {\r\n  if (childName !== undefined) {\r\n    return adapter.getChildrenByName(node, childName);\r\n  }\r\n\r\n  return node;\r\n};\r\n\r\nexport const getSingleNode = (node, adapter, childName = undefined) => {\r\n  const value = getValue(node, adapter, childName);\r\n\r\n  if (adapter.isList(value)) {\r\n    return adapter.getNodeAt(node);\r\n  }\r\n\r\n  return value;\r\n};\r\n\r\nexport const getNodeList = (node, adapter, childName = undefined) => {\r\n  return adapter.toList(getValue(node, adapter, childName));\r\n};\r\n","let augmentations = {};\r\n\r\nexport const resetAugmentations = (augs = {}) => {\r\n  augmentations = augs;\r\n};\r\n\r\nexport const addAugmentations = (augs = {}) => {\r\n  augmentations = {\r\n    ...augmentations,\r\n    ...augs,\r\n  };\r\n};\r\n\r\nexport const hasAugmentation = (key) => (\r\n  key\r\n  && typeof key === 'string'\r\n  && augmentations.hasOwnProperty(key)\r\n);\r\n\r\nexport const getAugmentation = (key) => augmentations[key];\r\n\r\nexport const applyAugmentation = (key, ...args) => augmentations[key](...args);\r\n","import {\r\n  isIntKey,\r\n  getValue,\r\n  getSingleNode,\r\n  getNodeList,\r\n} from './utils';\r\n\r\nimport {\r\n  isPrefixedKey,\r\n  isValidPrefix,\r\n  getPrefixHandler,\r\n} from './prefixes';\r\n\r\nimport {\r\n  hasAugmentation,\r\n  applyAugmentation,\r\n} from './augmentations';\r\n\r\nlet handlers;\r\nlet utils;\r\n\r\nconst createWalkerNode = (node, adapter, childName = undefined) => {\r\n  function TreeWalker() {\r\n    throw new Error('should have been never called');\r\n  }\r\n\r\n  // can be single Node and NodeList with length >= 0\r\n  // should it be always NodeList?\r\n  TreeWalker.node = node;\r\n  // childName always String/Symbol, Number's are being handled in proxy get wrapper\r\n  // INFO \"name\" is RO property of Function object\r\n  TreeWalker.childName = childName;\r\n  TreeWalker.adapter = adapter;\r\n  return TreeWalker;\r\n};\r\n\r\nconst wrapWithProxy = (node, adapter, childName = undefined) => {\r\n  if (!adapter.isNode(node) && !adapter.isList(node)) {\r\n    return node;\r\n  }\r\n\r\n  return new Proxy(createWalkerNode(node, adapter, childName), handlers);\r\n};\r\n\r\n// eslint-disable-next-line\r\nutils = {\r\n  isIntKey,\r\n  getValue,\r\n  getSingleNode,\r\n  getNodeList,\r\n  wrapWithProxy,\r\n};\r\n\r\nconst get = ({ node, adapter, childName }, key) => {\r\n  /*\r\n   if string childName used\r\n   if starts with $, return attribute value\r\n   else return wrapper with current single node and property childName\r\n   if numeric index used, use node as parent and childName is undefined\r\n   */\r\n  if (isIntKey(key)) {\r\n    return wrapWithProxy(adapter.getNodeAt(getNodeList(node, adapter, childName), key), adapter);\r\n  }\r\n\r\n  if (isPrefixedKey(key)) {\r\n    const handler = getPrefixHandler(key);\r\n    return handler(getValue(node, adapter, childName), adapter, [key.substr(1)], utils);\r\n  }\r\n\r\n  // return wrap with node and childName\r\n  return wrapWithProxy(getValue(node, adapter, childName), adapter, key);\r\n};\r\n\r\nconst has = ({ node, adapter, childName }, key) => {\r\n  if (isIntKey(key)) {\r\n    return !!adapter.getNodeAt(getNodeList(node, adapter, childName), key);\r\n  }\r\n\r\n  if (isPrefixedKey(key)) {\r\n    // return adapter.hasAttribute(getSingleNode(node, adapter, childName), key.substr(1));\r\n    // don't know how to implement this, calling same handler as in GET seems overkill\r\n    return true;\r\n  }\r\n\r\n  return adapter.hasChild(getSingleNode(), key);\r\n};\r\n\r\nconst apply = ({ node, adapter, childName }, thisArg, argumentsList) => {\r\n  if (childName === undefined) {\r\n    throw new Error('Cannot call on TreeWalker Node');\r\n  }\r\n\r\n  // this works only of childName === prefix, one char string\r\n  // otherwise it should be passed into arguments\r\n  if (isValidPrefix(childName)) {\r\n    const handler = getPrefixHandler(childName);\r\n    return handler(node, adapter, argumentsList, utils);\r\n  }\r\n\r\n  if (hasAugmentation(childName)) {\r\n    // INFO cannot use target because it contains method's childName, not Node childName\r\n    // call the function with saving context, so other augmentations are accessible via \"this\"\r\n    return applyAugmentation(childName, node, adapter, argumentsList, utils);\r\n  }\r\n\r\n  // FIXME might throw only in dev mode(needs implmentation)\r\n  throw new Error(`\"${childName}\" is not a callable object.`);\r\n};\r\n\r\nhandlers = {\r\n  get,\r\n  has,\r\n  apply,\r\n};\r\n\r\nexport default wrapWithProxy;\r\n\r\n","const toString = (node) => node.toString();\r\nconst valueOf = (node) => node;\r\n\r\nexport default {\r\n  toString,\r\n  valueOf,\r\n  [Symbol.toPrimitive]: (node) => node,\r\n};\r\n","import { setDefaultAdapter, getDefaultAdapter } from './default-adapter';\nimport { setNamePrefix, isValidPrefix } from './prefixes';\nimport wrapWithProxy from './wrapper';\nimport { addAugmentations, resetAugmentations, hasAugmentation } from './augmentations';\nimport coreAugmentations from './augmentations/core';\n\naddAugmentations(coreAugmentations);\n\nconst create = (root, adapter = getDefaultAdapter()) =>\n  wrapWithProxy(adapter.validateRoot(root), adapter);\n\nexport {\n  setDefaultAdapter,\n  getDefaultAdapter,\n\n  addAugmentations,\n  hasAugmentation,\n  resetAugmentations,\n  coreAugmentations,\n\n  setNamePrefix,\n  isValidPrefix,\n\n  create,\n};\n\nexport default create;\n"],"names":["defaultAdapter","getDefaultAdapter","namePrefixes","isValidPrefix","prefix","length","hasOwnProperty","isPrefixedKey","key","charAt","getPrefixHandler","isIntKey","parseInt","getValue","node","adapter","childName","undefined","getChildrenByName","getSingleNode","value","isList","getNodeAt","getNodeList","toList","augmentations","addAugmentations","augs","hasAugmentation","utils","wrapWithProxy","isNode","Proxy","TreeWalker","Error","createWalkerNode","handlers","handler","substr","hasChild","thisArg","argumentsList","args","applyAugmentation","toString","Symbol","toPrimitive","coreAugmentations","create","root","validateRoot"],"mappings":"6LAAA,IAAIA,EAAiB,WAKRC,EAAoB,IAAMD,ECLjCE,KAEOC,EAAiBC,GACV,iBAAXA,GACc,IAAlBA,EAAOC,QACPH,EAAaI,eAAeF,GAGpBG,EAAiBC,GAC5BA,GACmB,iBAATA,GACPA,EAAIH,OAAS,GACbH,EAAaI,eAAeE,EAAIC,UAGxBC,EAAoBF,GAAQN,EAAaM,EAAIC,UCf7CE,EAAYH,MAAYI,SAASJ,EAAK,QAAUA,EAEhDK,EAAW,CAACC,EAAMC,EAASC,SACpBC,IAAdD,EACKD,EAAQG,kBAAkBJ,EAAME,GAGlCF,EAGIK,EAAgB,CAACL,EAAMC,EAASC,WACrCI,EAAQP,EAASC,EAAMC,EAASC,UAElCD,EAAQM,OAAOD,GACVL,EAAQO,UAAUR,GAGpBM,GAGIG,EAAc,CAACT,EAAMC,EAASC,IAClCD,EAAQS,OAAOX,EAASC,EAAMC,EAASC,ICrBhD,IAAIS,WAMSC,EAAmB,CAACC,2BAE1BF,EACAE,IAIMC,EAAmBpB,GAC9BA,GACkB,iBAARA,GACPiB,EAAcnB,eAAeE,SCG9BqB,EAEJ,MAeMC,EAAgB,CAAChB,EAAMC,EAASC,IAC/BD,EAAQgB,OAAOjB,IAAUC,EAAQM,OAAOP,GAItC,IAAIkB,MApBY,EAAClB,EAAMC,EAASC,cAC9BiB,UACD,IAAIC,MAAM,0CAKPpB,KAAOA,IAGPE,UAAYA,IACZD,QAAUA,EACdkB,GAQUE,CAAiBrB,EAAMC,EAASC,GAAYoB,GAHpDtB,EAOXe,wEAgEAO,OAxDY,EAAGtB,KAAAA,EAAMC,QAAAA,EAASC,UAAAA,GAAaR,QAOrCG,EAASH,UACJsB,EAAcf,EAAQO,UAAUC,EAAYT,EAAMC,EAASC,GAAYR,GAAMO,MAGlFR,EAAcC,UACAE,EAAiBF,EAC1B6B,CAAQxB,EAASC,EAAMC,EAASC,GAAYD,GAAUP,EAAI8B,OAAO,IAAKT,UAIxEC,EAAcjB,EAASC,EAAMC,EAASC,GAAYD,EAASP,QAGxD,EAAGM,KAAAA,EAAMC,QAAAA,EAASC,UAAAA,GAAaR,IACrCG,EAASH,KACFO,EAAQO,UAAUC,EAAYT,EAAMC,EAASC,GAAYR,KAGhED,EAAcC,IAMXO,EAAQwB,SAASpB,IAAiBX,SAG7B,EAAGM,KAAAA,EAAMC,QAAAA,EAASC,UAAAA,GAAawB,EAASC,aAClCxB,IAAdD,QACI,IAAIkB,MAAM,qCAKd/B,EAAca,UACAN,EAAiBM,EAC1BqB,CAAQvB,EAAMC,EAAS0B,EAAeZ,MAG3CD,EAAgBZ,SD9EW,EAACR,KAAQkC,IAASjB,EAAcjB,MAAQkC,GCiF9DC,CAAkB3B,EAAWF,EAAMC,EAAS0B,EAAeZ,SAI9D,IAAIK,UAAUlB,kDC1GJF,GAASA,EAAK8B,mBACf9B,GAASA,GAKvB+B,OAAOC,aAAehC,GAASA,KCAjBiC,SAEXC,EAAS,CAACC,EAAMlC,EAAUd,MAC9B6B,EAAcf,EAAQmC,aAAaD,GAAOlC,uBNPVA,CAAAA,MACfA,wFGDe,EAACY,UACjBA,0CFcW,EAACvB,EAAQiC,QACd,iBAAXjC,GAAyC,IAAlBA,EAAOC,aACjC,IAAI6B,MAAM,+CAGL9B,GAAUiC"}