!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e(t.TreeWalker={})}(this,function(t){"use strict";let e=null;const r=()=>e,o={},n=t=>"string"==typeof t&&1===t.length&&o.hasOwnProperty(t),i=t=>t&&"string"==typeof t&&t.length>1&&o.hasOwnProperty(t.charAt()),a=t=>o[t.charAt()],s=t=>`${parseInt(t,10)}`===t,l=(t,e,r)=>void 0!==r?e.getChildrenByName(t,r):t,d=(t,e,r)=>{const o=l(t,e,r);return e.isList(o)?e.getNodeAt(t):o},h=(t,e,r)=>e.toList(l(t,e,r));let p={};const g=(t={})=>{p=Object.assign({},p,t)},u=t=>t&&"string"==typeof t&&p.hasOwnProperty(t);let c,f;const y=(t,e,r)=>e.isNode(t)||e.isList(t)?new Proxy(((t,e,r)=>{function o(){throw new Error("should have been never called")}return o.node=t,o.childName=r,o.adapter=e,o})(t,e,r),c):t;f={isIntKey:s,getValue:l,getSingleNode:d,getNodeList:h,wrapWithProxy:y};c={get:({node:t,adapter:e,childName:r},o)=>{if(s(o))return y(e.getNodeAt(h(t,e,r),o),e);if(i(o))return a(o)(l(t,e,r),e,[o.substr(1)],f);return y(l(t,e,r),e,o)},has:({node:t,adapter:e,childName:r},o)=>s(o)?!!e.getNodeAt(h(t,e,r),o):!!i(o)||e.hasChild(d(),o),apply:({node:t,adapter:e,childName:r},o,i)=>{if(void 0===r)throw new Error("Cannot call on TreeWalker Node");if(n(r))return a(r)(t,e,i,f);if(u(r))return((t,...e)=>p[t](...e))(r,t,e,i,f);throw new Error(`"${r}" is not a callable object.`)}};var w={toString:t=>t.toString(),valueOf:t=>t,[Symbol.toPrimitive]:t=>t};var P={children:(t,e,[r],o)=>{let n;return n=r?e.getChildrenByName(t,r):e.getChildren(t),o.wrapWithProxy(n,e)},childAt:(t,e,[r=0],o)=>o.wrapWithProxy(e.getChildAt(t,r),e),root:(t,e,r,o)=>o.wrapWithProxy(e.getNodeRoot(t),e),parent:(t,e,r,o)=>o.wrapWithProxy(e.getNodeParent(t),e)};var x={length:(t,e)=>e.isList(t)?e.getLength(t):e.isNode(t)?1:0,first:(t,e,r,o)=>{let n=t;return e.isList(t)&&(t.length?[n]=t:n=[]),o.wrapWithProxy(n,e)},filter:(t,e,[r],o)=>{t=e.toList(t);const n=[],i=o.wrapWithProxy(t,e);for(let a=0;a<t.length;a+=1){const s=t[a];r(o.wrapWithProxy(s,e),a,i)&&n.push(s)}return o.wrapWithProxy(n,e)},map:(t,e,[r,o=!0],n)=>{t=e.toList(t);const i=[];let a=!0;const s=n.wrapWithProxy(t,e);for(let o=0;o<t.length;o+=1){const l=t[o],d=r(n.wrapWithProxy(l,e),o,s);a=a&&e.isNode(d),i.push(d)}return o&&a?n.wrapWithProxy(i,e):i},reduce:(t,e,[r,o],n)=>{t=e.toList(t);const i=n.wrapWithProxy(t,e);for(let a=0;a<t.length;a+=1){const s=t[a];o=r(o,n.wrapWithProxy(s,e),a,i)}return o}};g(w);const m=(t,e=r())=>y(e.validateRoot(t),e);t.setDefaultAdapter=(t=>{e=t}),t.getDefaultAdapter=r,t.addAugmentations=g,t.hasAugmentation=u,t.resetAugmentations=((t={})=>{p=t}),t.coreAugmentations=w,t.nodeAugmentations=P,t.listAugmentations=x,t.setNamePrefix=((t,e)=>{if("string"!=typeof t||1!==t.length)throw new Error("Name Prefix must be one character string.");o[t]=e}),t.isValidPrefix=n,t.create=m,t.default=m,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=tree-walker.min.js.map
